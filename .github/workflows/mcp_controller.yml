name: MCP Task Controller

on:
  workflow_dispatch:  # Ручной запуск
    inputs:
      task_type:
        description: 'Тип задачи (train, predict, process, custom)'
        required: true
        default: 'process'
      task_params:
        description: 'Параметры задачи в формате JSON'
        required: false
        default: '{}'
  
  # Запуск по API
  repository_dispatch:
    types: [mcp_task]
  
  # Запуск по расписанию (каждый день в полночь)
  schedule:
    - cron: '0 0 * * *'

# Глобальные переменные окружения
env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
  DEFAULT_TASK_TYPE: 'process'
  DEFAULT_TASK_PARAMS: '{}'

jobs:
  process-task:
    runs-on: ubuntu-latest
    
    # Ограничиваем параллельное выполнение задач
    concurrency: 
      group: mcp-task-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set task parameters
      id: set_params
      env:
        # Определяем тип задачи
        INPUT_TASK_TYPE: ${{ github.event.inputs.task_type || '' }}
        INPUT_TASK_PARAMS: ${{ github.event.inputs.task_params || '{}' }}
        DISPATCH_TASK_TYPE: ${{ github.event.client_payload.task_type || '' }}
        DISPATCH_TASK_PARAMS: ${{ toJSON(github.event.client_payload.task_params) || '{}' }}
      run: |
        # Устанавливаем тип задачи
        if [[ -n "$INPUT_TASK_TYPE" ]]; then
          echo "TASK_TYPE=$INPUT_TASK_TYPE" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "repository_dispatch" && -n "$DISPATCH_TASK_TYPE" ]]; then
          echo "TASK_TYPE=$DISPATCH_TASK_TYPE" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "TASK_TYPE=scheduled" >> $GITHUB_ENV
        else
          echo "TASK_TYPE=$DEFAULT_TASK_TYPE" >> $GITHUB_ENV
        fi
        
        # Устанавливаем параметры задачи
        if [[ -n "$INPUT_TASK_PARAMS" && "$INPUT_TASK_PARAMS" != "{}" ]]; then
          echo "TASK_PARAMS='$INPUT_TASK_PARAMS'" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "repository_dispatch" && -n "$DISPATCH_TASK_PARAMS" && "$DISPATCH_TASK_PARAMS" != "{}" ]]; then
          echo "TASK_PARAMS='$DISPATCH_TASK_PARAMS'" >> $GITHUB_ENV
        else
          echo "TASK_PARAMS='$DEFAULT_TASK_PARAMS'" >> $GITHUB_ENV
        fi

    - name: Run MCP Task
      id: mcp_task
      env:
        PYTHONPATH: ${{ github.workspace }}
        # Безопасное использование переменных окружения
        TASK_TYPE: ${{ env.TASK_TYPE || env.DEFAULT_TASK_TYPE }}
        TASK_PARAMS: ${{ env.TASK_PARAMS || env.DEFAULT_TASK_PARAMS }}
      run: |
        echo "Запуск задачи MCP: $TASK_TYPE"
        echo "Параметры: $TASK_PARAMS"
        
        # Здесь будет вызов вашего скрипта обработки задач
        # python -m app.mcp.controller --task-type "$TASK_TYPE" --params "$TASK_PARAMS"
        
        # Пример вывода результата
        echo "status=success" >> $GITHUB_OUTPUT
        echo 'result={"message": "Task completed"}' >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Handle task result
      if: always()
      run: |
        if [[ "${{ steps.mcp_task.outputs.status }}" == "success" ]]; then
          echo "✅ Задача успешно выполнена"
          echo "Результат: ${{ steps.mcp_task.outputs.result }}"
        else
          echo "❌ Ошибка при выполнении задачи"
          exit 1
        fi

    - name: Send notification
      if: always() && github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' && env.SLACK_WEBHOOK_URL != ''
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
        SLACK_CHANNEL: '#mcp-notifications'
        SLACK_TITLE: "MCP Task ${{ job.status }}"
        SLACK_MESSAGE: |
          *Задача*: ${{ github.workflow }}
          *Тип*: ${{ env.TASK_TYPE || 'N/A' }}
          *Статус*: ${{ job.status }}
          *Ссылка*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_USERNAME: "GitHub Actions"
        SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
