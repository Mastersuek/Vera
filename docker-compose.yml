version: '3.8'

x-buildkit: &buildkit
  cache_from:
    - type=local,src=.docker-cache/
  cache_to: type=local,dest=.docker-cache-new,mode=max

services:
  # Основное приложение
  app:
    build:
      context: .
      target: production
      <<: *buildkit
    container_name: vera-app
    restart: unless-stopped
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - vera-network

  # База данных PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: vera-postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - vera-network

  # Кэш Redis
  redis:
    image: redis:7-alpine
    container_name: vera-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    networks:
      - vera-network

  # Админка базы данных (дополнительно)
  pgadmin:
    image: dpage/pgadmin4
    container_name: vera-pgadmin
    restart: unless-stopped
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    networks:
      - vera-network

  # Мониторинг Redis (дополнительно)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vera-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    networks:
      - vera-network

networks:
  vera-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
